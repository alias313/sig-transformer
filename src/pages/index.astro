---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Chart from '../components/Chart.astro';

const maxFreq = 50;
---

<Layout title="SigTransformer">
	<main class="flex flex-col items-center justify-center">
		<h1>Signal <span class="text-gradient">Transformer</span></h1>
		<p class="instructions">
			Generate your signal and observe its <code>DFT</code> (Discrete Fourier Transform)<br />
			<strong>Challenge:</strong> Guess the shape of the transform beforehand.
		</p>

			<!-- New flex container for side-by-side layout -->
			<div class="mx-auto w-5/5 w-full flex flex-col md:flex-row gap-12 justify-center pr-20 ml-[-15%]">
				<!-- Left column - Form -->
				<div class="md:w-3/5">
					<h1 class="text-2xl font-bold text-center mb-6 text-purple-400">Signal Generator</h1>
					
					<div class="bg-darker border border-gray-800 rounded-lg shadow-lg p-6">
					<form id="signalForm" class="space-y-4">
						<!-- Row 1: Start and End -->
						<div class="grid grid-cols-2 gap-4">
						<div>
							<label for="a" class="block text-sm font-medium text-white mb-1">Start:</label>
							<input type="number" id="a" name="a" value="-10" step="0.1"
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
						</div>
						<div>
							<label for="b" class="block text-sm font-medium text-white mb-1">End:</label>
							<input type="number" id="b" name="b" value="10" step="0.1"
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
						</div>
						</div>
						
						<!-- Row 2: Signal Type and Amplitude -->
						<div class="grid grid-cols-2 gap-4">
						<div>
							<label for="signalShape" class="block text-sm font-medium text-white mb-1">Signal Type:</label>
							<select id="signalShape" name="signalShape" 
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
							<option value="square">Square</option>
							<option value="triangle">Triangle</option>
							<option value="sinc">Sinc</option>
							<option value="sin">Sine</option>
							<option value="cos">Cosine</option>
							<option value="exp">Exponential</option>
							</select>
						</div>
						<div>
							<label for="amplitude" class="block text-sm font-medium text-white mb-1">Amplitude:</label>
							<input type="number" id="amplitude" name="amplitude" value="1" step="0.1"
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
						</div>
						</div>
						
						<!-- Row 3: Frequency and Phase -->
						<div class="grid grid-cols-2 gap-4">
						<div>
							<label for="frequency" id="freqLabel" class="block text-sm font-medium text-white mb-1">Frequency:</label>
							<input type="number" id="frequency" name="frequency" value="1" step="0.1" min="0"
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
						</div>
						<div>
							<label for="phase" class="block text-sm font-medium text-white mb-1">Phase:</label>
							<input type="number" id="phase" name="phase" value="0"  step="0.1"
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
						</div>
						</div>
						
						<!-- Row 4: Interval and Frequency Range -->
						<div class="grid grid-cols-2 gap-4">
						<div>
							<label for="interval" class="block text-sm font-medium text-white mb-1">Interval:</label>
							<input type="number" id="interval" name="interval" value="0.01" step="0.01" min="0.01" max="0.1"
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
						</div>
						<div>
							<label for="freqrange" class="block text-sm font-medium text-white mb-1">Freq. range of fft:</label>
							<input type="number" id="freqrange" name="freqrange" value="25" step="0.05" min="0.05" max={maxFreq}
							class="w-full bg-dark border border-gray-800 rounded-md py-2 px-3 text-white focus:outline-none focus:ring-2 focus:ring-purple-700">
						</div>
						</div>

						<!-- Row 5: Button -->
						<div class="w-full">
							<div class="flex items-end">
								<button type="submit" 
								class="w-full bg-gradient-to-r from-darkpurple-900 to-darkpurple-800 hover:from-darkpurple-800 hover:to-darkpurple-700 text-white font-medium py-2 px-4 rounded-md transition-colors focus:outline-none focus:ring-2 focus:ring-purple-700 focus:ring-offset-2 focus:ring-offset-darker shadow-md">
								Generate Signal
								</button>
							</div>
						</div>	
					</form>
					</div>
				</div>
				
				<!-- Right column - Chart and Cards -->
				<div class="md:w-3/5">
					<Chart />
				</div>
			</div>

			<ul role="list" class="link-card-grid my-10">
				<Card
					href="https://en.wikipedia.org/wiki/Discrete_Fourier_transform"
					title="DFT"
					body="Learn more about the DFT and its properties."
				/>
				<Card
					href="https://www.youtube.com/watch?v=h7apO7q16V0"
					title="FFT Algorithm"
					body="This video visually explain the algorithm that is used to transform the input signals."
				/>
			</ul>

		<script type="module">
			import { loadJSONToIndexedDB } from './src/api/load-fft-data.js';
			
			// Get the input elements
			const shapeInput = document.getElementById('signalShape');
			const freqLabelInput = document.getElementById('freqLabel');

			const intervalInput = document.getElementById('interval');
			const freqRangeInput = document.getElementById('freqrange');

			function updateFreqLabel() {
				if (shapeInput.value === "square") {
					freqLabelInput.textContent = "Duration T:";
				} else if (shapeInput.value === "triangle") {
					freqLabelInput.textContent = "Duration 2T:";
				} else {
					freqLabelInput.textContent = "Frequency:";
				}
			}
			
			function updateDynamicMax() {
			// Get the current interval value (as a number)
			const currentInterval = parseFloat(intervalInput.value);
			// Assume you calculate total_samples from other inputs, for example:
			const a = parseFloat(document.getElementById('a').value);
			const b = parseFloat(document.getElementById('b').value);
			const total_samples = Math.ceil((b - a) / currentInterval);
			
			// Calculate your dynamic max (use your formula here)
			const dynamicMax = Math.floor(10*(total_samples - Math.round(total_samples/2))/(total_samples * currentInterval)) / 10;
			
			console.log("Dynamic Max:", dynamicMax);
			
			// Update the max attribute and current value if needed
			freqRangeInput.setAttribute('max', dynamicMax);
			if (parseFloat(freqRangeInput.value) > dynamicMax) {
				freqRangeInput.value = dynamicMax;
			}
			}

			// Attach an event listener to update when the interval value changes
			intervalInput.addEventListener('input', updateDynamicMax);
			updateDynamicMax(); // call on load
			shapeInput.addEventListener('input', updateFreqLabel);
			updateFreqLabel(); // call on load

			// Optionally, you might also want to update when the a or b inputs change
			document.getElementById('a').addEventListener('input', updateDynamicMax);
			document.getElementById('b').addEventListener('input', updateDynamicMax);


			const signalForm = document.getElementById('signalForm');

			signalForm.addEventListener('submit', async (event) => {
			event.preventDefault(); // Prevent the default form submission (and redirect)

			// Collect form data to a plain object
			const formData = new FormData(signalForm);
			const data = Object.fromEntries(formData.entries());

			try {
				const response = await fetch('http://localhost:3000/execute-fft', {
				method: 'POST',
				headers: { 'Content-Type': 'application/json' },
				body: JSON.stringify(data)
				});
				
				if (!response.ok) {
				throw new Error(`HTTP error! Status: ${response.status}`);
				}
				
				// This is where you read the JSON response returned by the server.
				const fftData = await response.json();
				console.log("Received FFT JSON:", fftData);
				await loadJSONToIndexedDB(fftData);
				window.updateChartData?.(data);

				// Now update your charts with the new data.
				// For example, if you have a function to update charts, call it with fftData.
				// updateCharts(fftData);
				
			} catch (error) {
				console.error('Error executing FFT:', error);
				alert('Error executing FFT');
			}
			});
		</script>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		column-gap: 2rem; /* horizontal space */
		row-gap: 1rem;    /* vertical space */
		padding: 0;
	}
</style>
