---
import Layout from '../layouts/Layout.astro';
import Card from '../components/Card.astro';
import Chart from '../components/Chart.astro';
//import Chart from '../components/Chart.jsx';
//import Chart from '../components/Chart-test.jsx';
import TestComponent from '../components/TestComponent.jsx';
---

<Layout title="SigTransformer">
	<main class="flex flex-col items-center justify-center">
		<h1>Signal <span class="text-gradient">Transformer</span></h1>
		<p class="instructions">
			Generate your signal and observe its <code>DFT</code> (Discrete Fourier Transform)<br />
			<strong>Challenge:</strong> Guess the shape of the transform beforehand.
		</p>
		<ul role="list" class="link-card-grid">
			<Card
				href="https://en.wikipedia.org/wiki/Discrete_Fourier_transform"
				title="DFT"
				body="Learn more about the DFT and its properties."
			/>
			<Card
				href="https://www.youtube.com/watch?v=h7apO7q16V0"
				title="FFT Algorithm"
				body="This video visually explain the algorithm that is used to transform the input signals."
			/>
		</ul>

		<div class="flex flex-col items-center justify-center">
			<form id="signalForm">
			  <div class="mb-4">
				<label for="a" class="mr-2 text-gray-700">Start:</label>
				<input type="number" id="a" name="a" value="-10" class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
			  </div>
	  
			  <div class="mb-4">
				<label for="b" class="mr-2 text-gray-700">End:</label>
				<input type="number" id="b" name="b" value="10" class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
			  </div>
	  
			  <div class="mb-4">
				<label for="signalShape" class="mr-2 text-gray-700">Signal Type:</label>
				<select id="signalShape" name="signalShape" class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
				  <option value="square">Square</option>
				  <option value="sin">Sine</option>
				  <option value="cos">Cosine</option>
				  <option value="sinc">Sinc</option>
				  <option value="exp">Exponential</option>
				  <option value="triangle">Triangle</option>
				</select>
			  </div>
	  
			  <div class="mb-4">
				<label for="amplitude" class="mr-2 text-gray-700">Amplitude:</label>
				<input type="number" id="amplitude" name="amplitude" value="1" class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
			  </div>
	  
			  <div class="mb-4">
				<label for="frequency" class="mr-2 text-gray-700">Frequency:</label>
				<input type="number" id="frequency" name="frequency" value="1" class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
			  </div>
	  
			  <div class="mb-4">
				<label for="phase" class="mr-2 text-gray-700">Phase:</label>
				<input type="number" id="phase" name="phase" value="0" class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
			  </div>
	  
			  <div class="mb-4">
				<label for="interval" class="mr-2 text-gray-700">Interval:</label>
				<input type="number" id="interval" name="interval" value="0.01" step="0.01" class="shadow appearance-none border rounded py-2 px-3 text-gray-700 leading-tight focus:outline-none focus:shadow-outline">
			  </div>
	  
			  <button type="submit" class="bg-blue-500 hover:bg-blue-700 text-white font-bold py-2 px-4 rounded focus:outline-none focus:shadow-outline">
				Generate Signal
			  </button>
			</form>
		  </div>
		  <TestComponent />
	<div class="w-full flex justify-center items-end">
		<Chart />
	</div>
    <script type="module">
		import { loadJSONToIndexedDB } from './src/signals/load-fft-data.js';
		loadJSONToIndexedDB();
		const signalForm = document.getElementById('signalForm');

		signalForm.addEventListener('submit', async (event) => {
		event.preventDefault(); // Prevent the default form submission (and redirect)

		// Collect form data to a plain object
		const formData = new FormData(signalForm);
		const data = Object.fromEntries(formData.entries());

		try {
			const response = await fetch('http://localhost:3000/execute-fft', {
			method: 'POST',
			headers: { 'Content-Type': 'application/json' },
			body: JSON.stringify(data)
			});
			
			if (!response.ok) {
			throw new Error(`HTTP error! Status: ${response.status}`);
			}
			
			// This is where you read the JSON response returned by the server.
			const fftData = await response.json();
			console.log("Received FFT JSON:", fftData);
			
			// Now update your charts with the new data.
			// For example, if you have a function to update charts, call it with fftData.
			// updateCharts(fftData);
			
		} catch (error) {
			console.error('Error executing FFT:', error);
			alert('Error executing FFT');
		}
		});
	</script>
	</main>
</Layout>

<style>
	main {
		margin: auto;
		padding: 1rem;
		width: 800px;
		max-width: calc(100% - 2rem);
		color: white;
		font-size: 20px;
		line-height: 1.6;
	}
	.astro-a {
		position: absolute;
		top: -32px;
		left: 50%;
		transform: translatex(-50%);
		width: 220px;
		height: auto;
		z-index: -1;
	}
	h1 {
		font-size: 4rem;
		font-weight: 700;
		line-height: 1;
		text-align: center;
		margin-bottom: 1em;
	}
	.text-gradient {
		background-image: var(--accent-gradient);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-size: 400%;
		background-position: 0%;
	}
	.instructions {
		margin-bottom: 2rem;
		border: 1px solid rgba(var(--accent-light), 25%);
		background: linear-gradient(rgba(var(--accent-dark), 66%), rgba(var(--accent-dark), 33%));
		padding: 1.5rem;
		border-radius: 8px;
	}
	.instructions code {
		font-size: 0.8em;
		font-weight: bold;
		background: rgba(var(--accent-light), 12%);
		color: rgb(var(--accent-light));
		border-radius: 4px;
		padding: 0.3em 0.4em;
	}
	.instructions strong {
		color: rgb(var(--accent-light));
	}
	.link-card-grid {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(24ch, 1fr));
		gap: 2rem;
		padding: 0;
	}
</style>
