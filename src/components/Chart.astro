
<div id="chart-root">
	<div id="container1" class="my-10 flex mx-auto w-[800px] h-[300px] justify-center relative">
		<div id="inputLegend" class="absolute left-0 transform -top-2 z-10 text-sm font-sans font-light text-white"></div>
	</div>
	<div id="container2" class="flex mx-auto w-[800px] h-[300px] justify-center relative">
		<div id="outputLegend" class="absolute left-0 transform -top-2 z-10 text-sm font-sans font-light text-white"></div>
	</div>
</div>

<script type="module">
import { createChart } from '/node_modules/lightweight-charts';
import { createDB } from '/src/scripts/db.js';
import loadSignalParamsFromLocalStorage from '/src/scripts/signal-handler.js';
// Create a new database
const db = await createDB();

const signalParams = loadSignalParamsFromLocalStorage();

async function getDataFromIndexedDB(frequencyLimit) {
	const inputSignal = [];
	const outputSignal = [];

	const data = await db.signals.toArray();
	data.forEach((row) => {
		outputSignal.push({
			time: parseFloat(row.Freq),
			value: parseFloat(row["re(FFT)"]),
		});
		inputSignal.push({
			time: parseFloat(row.input),
			value: parseFloat(row["re(signal)"]),
		});
	});

    const outputSignalSliced = outputSignal.filter(point =>
        point.time >= -frequencyLimit && point.time <= frequencyLimit
    );

  	return {
        inputSignal,
        outputSignal,
		outputSignalSliced
	};
}

// Poll until data is available:
const frequencyLimit = parseInt(signalParams["freqrange"]);
let { inputSignal, outputSignalSliced } = await getDataFromIndexedDB(frequencyLimit);
while (!inputSignal.length && !outputSignalSliced.length) {
  console.log("No data available yet, waiting 1000ms...");
  await new Promise(resolve => setTimeout(resolve, 1000));
  ({ inputSignal, outputSignalSliced } = await getDataFromIndexedDB(frequencyLimit));
}
console.log("inputSignal", inputSignal);
console.log("outputSignalSliced", outputSignalSliced);

function formatLegend(signalParams = {}) {
	const { a, b, signalShape, amplitude, frequency, phase, interval, freqrange } = signalParams;
	
	const inputFormatters = {
		square: 	`f(t) = A ⋅ Π(t / T) = ${amplitude} ⋅ Π(t / ${frequency})`,
		triangle: 	`f(t) = A ⋅ Λ(t / 2T) = ${amplitude} ⋅ Λ(t / ${frequency})`,
		sinc: 		`f(t) = A ⋅ sinc(f₀ ⋅ t - ϕ) = A ⋅ sin(f₀ ⋅ πt - ϕ) / (f₀ ⋅ πt - ϕ) = ${amplitude} ⋅ sinc(${frequency} ⋅ t - ${phase})`,
		sin: 		`f(t) = A ⋅ sin(2π ⋅ f₀ ⋅ t + ϕ) = ${amplitude} ⋅ sin(2π ⋅ ${frequency} ⋅ t + ${phase})`,
		cos: 		`f(t) = A ⋅ cos(2π ⋅ f₀ ⋅ t + ϕ) = ${amplitude} ⋅ cos(2π ⋅ ${frequency} ⋅ t + ${phase})`,
		exp: 		`f(t) = ${amplitude}⋅exp(t)`
	};

	const outputFormatters = {
		square: 	`re(FFT(f(t))) = A ⋅ T ⋅ sinc(T ⋅ f) = ${amplitude} ⋅ ${frequency} ⋅ sinc(${frequency} ⋅ f)`,
		triangle: 	`re(FFT(f(t))) = A ⋅ T ⋅ sinc²(T ⋅ f) = ${amplitude} ⋅ ${frequency} ⋅ sinc²(${frequency} ⋅ f)`,
		sinc: 		`re(FFT(f(t))) = A ⋅ Π(f / f₀) = ${amplitude} ⋅ Π(f / ${frequency})`,
		cos: 		`re(FFT(f(t))) = A ⋅ ½[𝛿(f - f₀) + 𝛿(f + f₀)] = ${amplitude} ⋅ ½[𝛿(f - ${frequency}) + 𝛿(f + ${frequency})]`,
		sin:		`re(FFT(f(t))) = 0`,
	};

	const inputSymbolName = inputFormatters[signalShape]
	? inputFormatters[signalShape]
	: `f(t)`;

	const outputSymbolName = outputFormatters[signalShape]
	? outputFormatters[signalShape]
	: `re(FFT(f(t)))`;


	return {
		inputSymbolName,
		outputSymbolName,
	};
}

let { inputSymbolName, outputSymbolName } = formatLegend(signalParams);

const chartOptions = {
  width: 800,
  height: 300,
	layout: {
		textColor: 'white',
		background: { color: '#13151a' },
		attributionLogo: false,
	},
	localization: {
    timeFormatter: time => time.toString(), // use numeric formatting
  },
};
const optionsToApply = {
	autoScale : true,
	rightPriceScale: {
		scaleMargins: {
			top: 0.4, // leave some space for the legend
			bottom: 0.15,
		},
	},
	crosshair: {
		// hide the horizontal crosshair line
		horzLine: {
			visible: false,
			labelVisible: false,
		},
	},
	// hide the grid lines
	grid: {
		vertLines: {
			visible: false,
		},
		horzLines: {
			visible: false,
		},
	},
}

const inputChart = createChart(document.getElementById('container1'), chartOptions);
inputChart.applyOptions(optionsToApply)
const inputAreaSeries = inputChart.addAreaSeries({
	topColor: '#d5b8f9',
	bottomColor: 'rgba(213, 184, 249, 0.5)',
	lineColor: '#d5b8f9',
	lineWidth: 2,
	priceLineVisible: false,
});
inputAreaSeries.setData(inputSignal);

const outputChart = createChart(document.getElementById('container2'), chartOptions);
outputChart.applyOptions(optionsToApply);
const outputAreaSeries = outputChart.addAreaSeries({
	topColor: '#d5b8f9',
	bottomColor: 'rgba(143, 67, 234, 0.33)',
	lineColor: '#d5b8f9',
	lineWidth: 2,
	priceLineVisible: false,
});
outputAreaSeries.setData(outputSignalSliced);

const inputLegend = document.getElementById('inputLegend')
const outputLegend = document.getElementById('outputLegend')

const getLastBar = series => {
	const lastIndex = series.dataByIndex(Infinity, -1);
	return series.dataByIndex(lastIndex);
};
const formatPrice = price => (Math.round(price * 100) / 100).toFixed(2);
const setTooltipHtml = (legend, name, time, value) => {
	legend.innerHTML = `
		<div class="text-lg my-0">${name}</div>
    	<div class="text-base my-0">${value}</div>
    	<div class="text-sm my-0">${time}</div>
	`;
};

const inputUpdateLegend = param => {
	const validCrosshairPoint = !(
		param === undefined || param.time === undefined || param.point.x < 0 || param.point.y < 0
	);
	const bar = validCrosshairPoint ? param.seriesData.get(inputAreaSeries) : getLastBar(inputAreaSeries);
	// time is in the same format that you supplied to the setData method,
	// which in this case is YYYY-MM-DD
	const time = bar.time;
	const price = bar.value !== undefined ? bar.value : bar.close;
	const formattedPrice = formatPrice(price);
	setTooltipHtml(inputLegend, inputSymbolName, time, formattedPrice);
};


const outputUpdateLegend = param => {
	const validCrosshairPoint = !(
		param === undefined || param.time === undefined || param.point.x < 0 || param.point.y < 0
	);
	const bar = validCrosshairPoint ? param.seriesData.get(outputAreaSeries) : getLastBar(outputAreaSeries);
	// time is in the same format that you supplied to the setData method,
	// which in this case is YYYY-MM-DD
	const time = bar.time;
	const price = bar.value !== undefined ? bar.value : bar.close;
	const formattedPrice = formatPrice(price);
	setTooltipHtml(outputLegend, outputSymbolName, time, formattedPrice);
};


inputChart.subscribeCrosshairMove(inputUpdateLegend);
outputChart.subscribeCrosshairMove(outputUpdateLegend);

inputUpdateLegend(undefined);
outputUpdateLegend(undefined);

async function updateChartData(signalParams = {}) {
	({ inputSymbolName, outputSymbolName } = formatLegend(signalParams));

	console.log("Updating chart data");
	const frequencyLimit = parseInt(signalParams["freqrange"]);
    const { inputSignal, outputSignalSliced } = await getDataFromIndexedDB(frequencyLimit);
	inputAreaSeries.setData(inputSignal);
    outputAreaSeries.setData(outputSignalSliced);
    inputUpdateLegend(undefined);
    outputUpdateLegend(undefined);

	inputChart.timeScale().fitContent();
	outputChart.timeScale().fitContent();
}

// Expose the updateChartData function to the window
window.updateChartData = updateChartData;


inputChart.timeScale().applyOptions({
	minBarSpacing: 0.1,
	fixLeftEdge: true,
	fixRightEdge: true,
	timeVisible: true,
	tickMarkFormatter: time => time.toString(),
})

outputChart.timeScale().applyOptions({
	minBarSpacing: 0.1,
	fixLeftEdge: true,
	fixRightEdge: true,
	timeVisible: true,
	tickMarkFormatter: time => time.toString(),
})

inputChart.timeScale().fitContent();
outputChart.timeScale().fitContent();

</script>
