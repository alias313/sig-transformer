---
import { getData } from '../signals/dataFetching';

const { inputSignal, outputSignalSliced } = await getData();
---

<div class="signal-input">
	<input type="text" placeholder="Asquare(t/T)"><br>
</div>
<div id="container1" class="relative">
	<div id="inputLegend" class="absolute left-1/2 transform -translate-x-1/2 -top-8 z-10 text-center text-sm font-sans font-light text-white"></div>
</div>
<div id="container2" class="relative">
	<div id="outputLegend" class="absolute left-1/2 transform -translate-x-1/2 -top-8 z-10 text-center text-sm font-sans font-light text-white"></div>
</div>

<script type="module" define:vars={{ inputSignal, outputSignalSliced }}>
import { createChart } from '/node_modules/lightweight-charts';

console.log(outputSignalSliced)

const inputExpression = "f(t)=1*sinc(2Ï€*f*t)"
const outputExpression = "FFT(f(t))"

const chartOptions = {
  width: 800,
  height: 300,
	layout: {
		textColor: 'white',
		background: { color: '#13151a' },
	},
};
const optionsToApply = {
	rightPriceScale: {
		scaleMargins: {
			top: 0.4, // leave some space for the legend
			bottom: 0.15,
		},
	},
	crosshair: {
		// hide the horizontal crosshair line
		horzLine: {
			visible: false,
			labelVisible: false,
		},
	},
	// hide the grid lines
	grid: {
		vertLines: {
			visible: false,
		},
		horzLines: {
			visible: false,
		},
	},
}

const inputChart = createChart(document.getElementById('container1'), chartOptions);

inputChart.applyOptions(optionsToApply)

const inputAreaSeries = inputChart.addAreaSeries({
	topColor: '#d5b8f9',
	bottomColor: 'rgba(213, 184, 249, 0.5)',
	lineColor: '#d5b8f9',
	lineWidth: 2,
	priceLineVisible: false,
});
inputAreaSeries.setData(inputSignal);

const outputChart = createChart(document.getElementById('container2'), chartOptions);

outputChart.applyOptions(optionsToApply);

const outputAreaSeries = outputChart.addAreaSeries({
	topColor: '#d5b8f9',
	bottomColor: 'rgba(143, 67, 234, 0.33)',
	lineColor: '#d5b8f9',
	lineWidth: 2,
	priceLineVisible: false,
});

outputAreaSeries.setData(outputSignalSliced);

const inputSymbolName = inputExpression
const inputLegend = document.getElementById('inputLegend')

const getLastBar = series => {
	const lastIndex = series.dataByIndex(Infinity, -1);
	return series.dataByIndex(lastIndex);
};
const formatPrice = price => (Math.round(price * 100) / 100).toFixed(2);

const inputSetTooltipHtml = (name, time, value) => {
	inputLegend.innerHTML = `
		<div class="text-lg my-0">${name}</div>
    	<div class="text-base my-0">${value}</div>
    	<div class="text-sm my-0">${time}</div>
	`;
};

const inputUpdateLegend = param => {
	const validCrosshairPoint = !(
		param === undefined || param.time === undefined || param.point.x < 0 || param.point.y < 0
	);
	const bar = validCrosshairPoint ? param.seriesData.get(inputAreaSeries) : getLastBar(inputAreaSeries);
	// time is in the same format that you supplied to the setData method,
	// which in this case is YYYY-MM-DD
	const time = bar.time;
	const price = bar.value !== undefined ? bar.value : bar.close;
	const formattedPrice = formatPrice(price);
	inputSetTooltipHtml(inputSymbolName, time, formattedPrice);
};


const outputSymbolName = outputExpression
const outputLegend = document.getElementById('outputLegend')

const outputSetTooltipHtml = (name, time, value) => {
	outputLegend.innerHTML = `
		<div class="text-lg my-0">${name}</div>
    	<div class="text-base my-0">${value}</div>
    	<div class="text-sm my-0">${time}</div>
	`;
};

const outputUpdateLegend = param => {
	const validCrosshairPoint = !(
		param === undefined || param.time === undefined || param.point.x < 0 || param.point.y < 0
	);
	const bar = validCrosshairPoint ? param.seriesData.get(outputAreaSeries) : getLastBar(outputAreaSeries);
	// time is in the same format that you supplied to the setData method,
	// which in this case is YYYY-MM-DD
	const time = bar.time;
	const price = bar.value !== undefined ? bar.value : bar.close;
	const formattedPrice = formatPrice(price);
	outputSetTooltipHtml(outputSymbolName, time, formattedPrice);
};


inputChart.subscribeCrosshairMove(inputUpdateLegend);
outputChart.subscribeCrosshairMove(outputUpdateLegend);

inputUpdateLegend(undefined);
outputUpdateLegend(undefined);

inputChart.timeScale().applyOptions({
	minBarSpacing: 0.1,
	fixLeftEdge: true,
	fixRightEdge: true,
	timeVisible: true,
})

outputChart.timeScale().applyOptions({
	minBarSpacing: 0.1,
	fixLeftEdge: true,
	fixRightEdge: true,
	timeVisible: true,
})

inputChart.timeScale().fitContent();
outputChart.timeScale().fitContent();

</script>